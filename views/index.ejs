<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title id="titulo">Proyecto 2 <%= title %></title>
    <style>
        /* 🔹 Estilos Generales */
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
            padding: 0;
            background-color: #f2f2f2;
        }

        /* 🔹 Navbar */
        .navbar {
            display: flex;
            justify-content: center;
            background-color: #333;
            padding: 15px 0;
        }

        .navbar a {
            color: white;
            text-decoration: none;
            padding: 15px 20px;
            font-size: 18px;
            transition: 0.3s;
        }

        .navbar a:hover, .navbar a.active {
            background-color: #4CAF50;
            border-radius: 5px;
        }

        /* 🔹 Secciones */
        .section {
            display: none;
            padding: 20px;
        }

        .section.active {
            display: block;
            animation: fadeIn 0.5s ease-in-out;
        }

        /* 🔹 Animación */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* 🔹 Mapas */
        .map-container {
            height: 70vh;
            width: 100%;
            border: 1px solid #ccc;
            margin-bottom: 15px;
        }

        /* 🔹 Panel de información */
        .info-panel {
            background: white;
            padding: 15px;
            margin: 15px auto;
            max-width: 600px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }

        .info-panel p {
            margin: 5px 0;
            text-align: left;
        }

        /* 🔹 Botones */
        .action-button {
            margin: 15px auto;
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: 0.3s;
            display: block;
        }

        .action-button:hover {
            background-color: #45a049;
        }

        /* 🔹 Formulario Histórico */
        .filter-form {
            background: white;
            padding: 15px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin: 0 auto 15px;
            max-width: 600px;
            border-radius: 5px;
        }

        .form-group {
            margin-bottom: 10px;
            text-align: left;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

        /* 🔹 Mensajes de error */
        .error-message {
            color: #d32f2f;
            background-color: #fde8e8;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
            display: none;
        }
    </style>
</head>
<body>

    <!-- 🔹 Navbar -->
    <div class="navbar">
        <a href="#" id="realTimeBtn" class="active">Real Time</a>
        <a href="#" id="historicalBtn">Historical</a>
    </div>

    <!-- 🔹 Sección "Real Time" -->
    <div id="realTime" class="section active">
        <h1>Real Time Tracking 🚕</h1>
        
        <!-- Panel de información -->
        <div class="info-panel">
            <p><strong>Latitud:</strong> <span id="latitud">N/A</span></p>
            <p><strong>Longitud:</strong> <span id="longitud">N/A</span></p>
            <p><strong>Fecha:</strong> <span id="fecha">N/A</span></p>
            <p><strong>Hora:</strong> <span id="tiempo">N/A</span></p>
        </div>
        
        <button id="seguirBtn" class="action-button">Seguir Taxi</button>
        <div id="realTimeMap" class="map-container">Cargando mapa en tiempo real...</div>
        <div id="realTimeError" class="error-message"></div>
    </div>

    <!-- 🔹 Sección "Historical" -->
    <div id="historical" class="section">
        <h1>Historical Tracking 📅</h1>
        
        <div class="filter-form">
            <div class="form-group">
                <label for="startDate">Fecha y hora inicial:</label>
                <input type="datetime-local" id="startDate">
            </div>
            
            <div class="form-group">
                <label for="endDate">Fecha y hora final:</label>
                <input type="datetime-local" id="endDate">
            </div>
            
            <button id="loadHistory" class="action-button">Cargar Trayectoria</button>
        </div>
        
        <div id="historicalError" class="error-message"></div>
        <div id="historicalMap" class="map-container">Seleccione un rango de fechas y haga clic en "Cargar Trayectoria"</div>
    </div>

    <script>
        // Configuración global
        const config = {
            basePath: window.location.pathname.includes("/test") ? "/test" : "",
            updateInterval: 5000
        };

        // Estado de la aplicación
        const appState = {
            // Real Time
            realTime: {
                map: null,
                marker: null,
                polyline: null,
                seguirCentrando: false,
                recorrido: [],
                intervalId: null
            },
            
            // Historical
            historical: {
                map: null,
                polyline: null,
                loaded: false
            },
            
            // Google Maps API
            mapsLoaded: false
        };

        // Elementos del DOM
        const domElements = {
            // Real Time
            realTimeBtn: document.getElementById('realTimeBtn'),
            historicalBtn: document.getElementById('historicalBtn'),
            realTimeSection: document.getElementById('realTime'),
            historicalSection: document.getElementById('historical'),
            realTimeMap: document.getElementById('realTimeMap'),
            historicalMap: document.getElementById('historicalMap'),
            seguirBtn: document.getElementById('seguirBtn'),
            loadHistory: document.getElementById('loadHistory'),
            startDate: document.getElementById('startDate'),
            endDate: document.getElementById('endDate'),
            latitud: document.getElementById('latitud'),
            longitud: document.getElementById('longitud'),
            fecha: document.getElementById('fecha'),
            tiempo: document.getElementById('tiempo'),
            realTimeError: document.getElementById('realTimeError'),
            historicalError: document.getElementById('historicalError')
        };

        // 🔹 FUNCIONES DE UTILIDAD 🔹

        function showError(element, message) {
            element.textContent = message;
            element.style.display = 'block';
            setTimeout(() => element.style.display = 'none', 5000);
        }

        function formatDateTime(dateStr, timeStr) {
            return `${dateStr}T${timeStr}`;
        }

        function getCurrentDateTime() {
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            
            return {
                date: `${year}-${month}-${day}`,
                time: `${hours}:${minutes}`,
                datetime: `${year}-${month}-${day}T${hours}:${minutes}`
            };
        }

        async function fetchData(endpoint) {
            try {
                const response = await fetch(`${config.basePath}${endpoint}`);
                if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
                const data = await response.json();
                return data;
            } catch (error) {
                console.error(`Error fetching ${endpoint}:`, error);
                throw error;
            }
        }

        // 🔹 REAL TIME TRACKING 🔹

        async function initRealTimeTracking() {
            try {
                // Obtener API Key
                const apiKeyData = await fetchData('/api-key');
                if (!apiKeyData.apiKey) throw new Error("API Key no recibida");

                // Obtener posición inicial
                const ubicacion = await fetchData('/data');
                if (!ubicacion?.LATITUDE || !ubicacion?.LONGITUDE) {
                    throw new Error("Datos de ubicación inicial incompletos");
                }

                // Actualizar panel de información
                updateInfoPanel(ubicacion);

                // Configurar posición inicial
                const posicionInicial = {
                    lat: parseFloat(ubicacion.LATITUDE),
                    lng: parseFloat(ubicacion.LONGITUDE)
                };

                appState.realTime.recorrido = [posicionInicial];

                // Cargar Google Maps API si no está cargada
                if (!appState.mapsLoaded) {
                    const script = document.createElement('script');
                    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKeyData.apiKey}&callback=initRealTimeMap`;
                    script.async = true;
                    script.defer = true;
                    document.head.appendChild(script);
                    appState.mapsLoaded = true;
                } else {
                    initRealTimeMap();
                }
            } catch (error) {
                console.error('Error inicializando Real Time Tracking:', error);
                domElements.realTimeMap.innerHTML = `Error: ${error.message}`;
                showError(domElements.realTimeError, error.message);
            }
        }

        function initRealTimeMap() {
            console.log('Inicializando mapa en tiempo real...');
            
            // Crear mapa
            appState.realTime.map = new google.maps.Map(domElements.realTimeMap, {
                center: appState.realTime.recorrido[0],
                zoom: 15,
                streetViewControl: false
            });
            
            // Crear marcador
            appState.realTime.marker = new google.maps.Marker({
                position: appState.realTime.recorrido[0],
                map: appState.realTime.map,
                title: "Taxi 🚕",
                icon: {
                    url: "https://cdn-icons-png.flaticon.com/128/2401/2401174.png",
                    scaledSize: new google.maps.Size(50, 50)
                }
            });
            
            // Crear polilínea
            appState.realTime.polyline = new google.maps.Polyline({
                path: appState.realTime.recorrido,
                geodesic: true,
                strokeColor: "#FF0000",
                strokeOpacity: 1.0,
                strokeWeight: 4,
                map: appState.realTime.map
            });
            
            // Configurar botón seguir
            domElements.seguirBtn.addEventListener('click', () => {
                appState.realTime.seguirCentrando = true;
                centerOnTaxi();
            });
            
            // Detectar cuando el usuario mueve el mapa
            appState.realTime.map.addListener('dragstart', () => {
                appState.realTime.seguirCentrando = false;
            });
            
            // Iniciar actualización periódica
            updateRealTimeData();
            appState.realTime.intervalId = setInterval(updateRealTimeData, config.updateInterval);
        }

        async function updateRealTimeData() {
            try {
                const data = await fetchData('/data');
                
                // Validar datos recibidos
                if (!data?.LATITUDE || !data?.LONGITUDE) {
                    throw new Error("Datos de ubicación incompletos");
                }
                
                // Actualizar panel de información
                updateInfoPanel(data);
                
                // Actualizar posición del taxi
                const nuevaPosicion = {
                    lat: parseFloat(data.LATITUDE),
                    lng: parseFloat(data.LONGITUDE)
                };
                
                appState.realTime.marker.setPosition(nuevaPosicion);
                appState.realTime.recorrido.push(nuevaPosicion);
                appState.realTime.polyline.setPath(appState.realTime.recorrido);
                
                if (appState.realTime.seguirCentrando) {
                    centerOnTaxi();
                }
            } catch (error) {
                console.error('Error actualizando datos en tiempo real:', error);
            }
        }

        function centerOnTaxi() {
            if (appState.realTime.marker && appState.realTime.map) {
                appState.realTime.map.setCenter(appState.realTime.marker.getPosition());
            }
        }

        function stopRealTimeUpdates() {
            if (appState.realTime.intervalId) {
                clearInterval(appState.realTime.intervalId);
                appState.realTime.intervalId = null;
            }
        }

        function updateInfoPanel(data) {
            domElements.latitud.textContent = data.LATITUDE || "N/A";
            domElements.longitud.textContent = data.LONGITUDE || "N/A";
            domElements.fecha.textContent = data.DATE || "N/A";
            domElements.tiempo.textContent = data.TIME || "N/A";
        }

        // 🔹 HISTORICAL TRACKING 🔹

        async function initHistoricalTracking() {
            try {
                // Configurar fechas por defecto (última hora)
                const now = new Date();
                const oneHourAgo = new Date(now.getTime() - (60 * 60 * 1000));
                
                domElements.startDate.value = formatDateTimeInput(oneHourAgo);
                domElements.endDate.value = formatDateTimeInput(now);
                
                // Configurar evento del botón
                domElements.loadHistory.addEventListener('click', loadHistoricalData);
                
                // Inicializar mapa si no está inicializado
                if (!appState.historical.loaded && appState.mapsLoaded) {
                    initHistoricalMap();
                }
            } catch (error) {
                console.error('Error inicializando Historical Tracking:', error);
                showError(domElements.historicalError, error.message);
            }
        }

        function formatDateTimeInput(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            
            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        function initHistoricalMap() {
            console.log('Inicializando mapa histórico...');
            
            // Usar posición inicial del tiempo real o defaults
            const center = appState.realTime.recorrido.length > 0 ? 
                appState.realTime.recorrido[0] : 
                { lat: 4.710989, lng: -74.072092 }; // Bogotá por defecto
            
            appState.historical.map = new google.maps.Map(domElements.historicalMap, {
                center,
                zoom: 12,
                streetViewControl: false
            });
            
            appState.historical.loaded = true;
        }

        async function loadHistoricalData() {
    try {
        const startDate = domElements.startDate.value;
        const endDate = domElements.endDate.value;
        
        if (!startDate || !endDate) {
            throw new Error("Debe seleccionar ambas fechas");
        }
        
        // Mostrar carga
        domElements.historicalMap.innerHTML = "Cargando datos históricos...";
        domElements.historicalError.style.display = "none";
        
        // Obtener datos históricos
        const response = await fetch(`${config.basePath}/historical-data?startDate=${startDate}&endDate=${endDate}`);
        
        if (!response.ok) {
            throw new Error(`Error del servidor: ${response.status}`);
        }
        
        const result = await response.json();
        
        // Verificar estructura de la respuesta
        if (!result || !result.data || !Array.isArray(result.data)) {
            throw new Error("Formato de datos incorrecto recibido del servidor");
        }
        
        if (result.data.length === 0) {
            throw new Error("No hay datos para el rango seleccionado");
        }
        
        // Asegurarse que el mapa esté inicializado
        if (!appState.historical.map && appState.mapsLoaded) {
            initHistoricalMap();
        }
        
        // Procesar datos para el mapa
        const path = result.data.map(item => {
            if (!item.LATITUDE || !item.LONGITUDE) {
                throw new Error("Datos de ubicación incompletos");
            }
            return {
                lat: parseFloat(item.LATITUDE),
                lng: parseFloat(item.LONGITUDE)
            };
        });
        
        // Limpiar polilínea anterior si existe
        if (appState.historical.polyline) {
            appState.historical.polyline.setMap(null);
        }
        
        // Crear nueva polilínea
        appState.historical.polyline = new google.maps.Polyline({
            path: path,
            geodesic: true,
            strokeColor: "#4285F4",
            strokeOpacity: 1.0,
            strokeWeight: 4,
            map: appState.historical.map
        });
        
        // Ajustar vista para mostrar toda la ruta
        const bounds = new google.maps.LatLngBounds();
        path.forEach(point => bounds.extend(point));
        appState.historical.map.fitBounds(bounds);
        
        // Limpiar mensaje de carga
        domElements.historicalMap.innerHTML = "";
        
    } catch (error) {
        console.error('Error cargando datos históricos:', error);
        domElements.historicalMap.innerHTML = "Error al cargar datos. Intente nuevamente.";
        showError(domElements.historicalError, error.message);
    }
}

        // 🔹 MANEJO DE NAVEGACIÓN 🔹

        function switchToRealTime() {
            domElements.realTimeSection.classList.add("active");
            domElements.historicalSection.classList.remove("active");
            domElements.realTimeBtn.classList.add("active");
            domElements.historicalBtn.classList.remove("active");
            
            // Iniciar actualizaciones si no están activas
            if (!appState.realTime.intervalId) {
                updateRealTimeData();
                appState.realTime.intervalId = setInterval(updateRealTimeData, config.updateInterval);
            }
        }

        function switchToHistorical() {
            domElements.historicalSection.classList.add("active");
            domElements.realTimeSection.classList.remove("active");
            domElements.historicalBtn.classList.add("active");
            domElements.realTimeBtn.classList.remove("active");
            
            // Detener actualizaciones de tiempo real
            stopRealTimeUpdates();
            
            // Inicializar mapa histórico si no está inicializado
            if (!appState.historical.loaded && appState.mapsLoaded) {
                initHistoricalMap();
            }
        }

        // 🔹 INICIALIZACIÓN DE LA APLICACIÓN 🔹

        function initApp() {
            // Configurar eventos de navegación
            domElements.realTimeBtn.addEventListener("click", switchToRealTime);
            domElements.historicalBtn.addEventListener("click", switchToHistorical);
            
            // Inicializar Real Time Tracking
            initRealTimeTracking();
            
            // Preparar Historical Tracking
            initHistoricalTracking();
        }

        // Iniciar la aplicación cuando el DOM esté listo
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            setTimeout(initApp, 1);
        } else {
            document.addEventListener('DOMContentLoaded', initApp);
        }
    </script>
</body>
</html>